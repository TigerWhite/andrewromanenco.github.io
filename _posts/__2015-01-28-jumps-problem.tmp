---
layout: post
title:  "Minimum number of jumps problem"
date:   2015-01-28
tags: [dynamic-programming]
---
Read <a href="{{ site.baseurl }}/dynamic-programming-intro/" target="_blank">Dynamic Programming intro</a> first.

**Please, read till the end, as this problem has a solution better than dp**

`Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps.`

Source code for this post available <a href="https://github.com/andrewromanenco/dynamic-programming/tree/master/src/main/java/com/romanenco/dp/jumps/" target="_blank">@github</a> as maven based java project.

### Our plan

 - build brute force recursive solution
 - get surprised how slow it is and figure out why
 - improve solution with memoization
 - convert to “true” dynamic-programming bottom-up solution
 - bonus step

### Brute force solution

Recursion is good starting point for brute force solution. If we are in position i, we know which positions to the right are reachable with additional jump. Same rule applies to those right positions as well.

{% highlight java %}
public class MinJumpsBF {

    public int jump(int[] A) {
        if (A.length < 2) {
            return 0;
        }
        return jump(A, 0);
    }

    private int jump(int[] A, int index) {
        if (index >= A.length - 1) {
            return 0;
        }
        int min = Integer.MAX_VALUE;
        for (int i = 1; i <= A[index]; i++) {
            min = Math.min(min, 1 + jump(A, index + i));
        }
        return min;
    }

}
{% endhighlight %}

### Top-down with memoization

{% highlight java %}
public class MinJumpsTD {

    public int jump(int[] A) {
        if (A.length < 2) {
            return 0;
        }
        final int[] memo = new int[A.length];
        Arrays.fill(memo, -1);
        return jump(A, 0, memo);
    }

    private int jump(int[] A, int index, int[] memo) {
        if (index >= A.length - 1) {
            return 0;
        }
        if (memo[index] != -1) {
            return memo[index];
        }
        int min = Integer.MAX_VALUE;
        for (int i = 1; i <= A[index]; i++) {
            min = Math.min(min, 1 + jump(A, index + i, memo));
        }
        memo[index] = min;
        return min;
    }

}
{% endhighlight %}

### Bottom-up solution
{% highlight java %}
public class MinJumpsBU {

    public int jump(int[] A) {
        if (A.length < 2) {
            return 0;
        }
        final int[] memo = new int[A.length];
        for (int i = A.length - 2; i >= 0; i--) {
            int min = Integer.MAX_VALUE;
            for (int k = 1; k <= A[i]; k++) {
                if (i + k < A.length) {
                    min = Math.min(min, 1 + memo[i + k]);
                }
            }
            memo[i] = min;
        }
        return memo[0];
    }

}
{% endhighlight %}

{% highlight java %}
public class MinJumpsLinear {

    public int jump(int[] A) {
        if (A.length < 2) {
            return 0;
        }
        int steps = 0;
        int distance = 0;
        int update = 0;
        for (int i = 0; i < A.length - 1; i++) {
            if (i + A[i] > distance) {
                distance = i + A[i];
            }
            if (i == update) {
                steps++;
                update = distance;
                if (distance >= A.length - 1) {
                break;
            }
            }
        }
        return steps ;
    }

}
{% endhighlight %}